@{
    ViewData["Title"] = "Home Page";
    var url = Url.Action("Repo", "GitHub");
}
@using Newtonsoft.Json;
@model Tuple<List<Repo>, Repo, List<Repo>>;

@section Header{
    <header>
        <nav class="bg-gray-800">
            <div class="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
                <div class="relative flex h-16 items-center justify-between">
                    <div class="flex flex-1 items-stretch justify-start">
                        <div class="flex flex-shrink-0 items-center">
                            <a asp-controller="Home" asp-action="Index">
                                <svg xmlns="http://www.w3.org/2000/svg" width="200" height="50">
                                    <text x="10" y="40" font-family="Arial" font-size="30" fill="white" opacity="0">
                                        <animate attributeName="opacity" from="0" to="1" dur="1s" begin="0s" fill="freeze" />
                                        RepoInsight
                                    </text>
                                </svg>
                            </a>
                        </div>
                    </div>
                    <!-- Campo de busca -->
                    <div class="relative flex items-center justify-end md:w-auto px-4 md:px-0 md:mx-4">
                        <!-- Search input -->
                        <input type="text" id="searchInput" placeholder="Search" class="w-full md:w-auto bg-gray-700 p-2 rounded-l text-white focus:outline-none">
                        <!-- Search results -->
                        <div id="searchResults" class="absolute bg-gray-700 rounded mt-1 w-full border border-gray-300 hidden">
                            <!-- Search results will be displayed here -->
                        </div>
                        <!-- Search button -->
                        <button id="searchButton" class="bg-gray-700 p-2 rounded-r h-10 hover:bg-gray-600">
                            <span class="material-icons text-white">search</span>
                        </button>
                    </div>

                    <!-- Container to display search results -->
                    <div id="searchResults" class="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
                        <!-- Search results will be displayed here -->
                    </div>
                    @* <div class="flex items-center justify-end md:w-auto px-4 md:px-0 md:mx-4">
                        <input type="text" placeholder="Search" class="w-full md:w-auto bg-gray-700 p-2 rounded text-white mx-2">
                        <button class="bg-gray-700 p-2 rounded hover:bg-gray-600">
                            <span class="material-icons text-white">search</span>
                        </button>
                    </div> *@
                    <div class="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">

                        <!-- Profile dropdown -->
                        <div class="relative ml-3">
                            <div>
                                <button type="button" class="relative flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800" id="user-menu-button" aria-expanded="false" aria-haspopup="true">
                                    <span class="absolute -inset-1.5"></span>
                                    <span class="sr-only">Open user menu</span>
                                    <img class="h-8 w-8 rounded-full" src="~/img/user.png" alt="User Icon">
                                </button>
                            </div>

                            <!-- Dropdown menu, initially hidden -->
                            <div class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
                                <a href="#" onclick="contaModal()" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="user-menu-item-0">Conta</a>
                                <a asp-controller="User" asp-action="Logout" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="user-menu-item-1">Sair</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    </header>
}

<body class="bg-gray-900 text-white">
    <div class="flex flex-col md:flex-row">
        <div id="warning" class="absolute top-0 right-0 bg-red-500 shadow-lg shadow-red-900 border-2 border-red-600 rounded mt-4 mr-2 p-3 transition-opacity duration-500 ease-in opacity-100 hidden">
            <p>
            @ViewBag.ErrorMessage
            </p>
        </div>
        <div id="success" class="absolute top-0 right-0 bg-green-500 shadow-lg shadow-green-900 border-2 border-green-600 rounded mt-4 mr-2 p-3 transition-opacity duration-500 ease-in opacity-100 hidden">
            <p>
            @ViewBag.SuccessMessage
            </p>
        </div>
        <!-- Sidebar -->
        <div class="relative h-40 p-4 rounded text-white mt-2 w-full md:w-1/4 md:h-[800px] overflow-y-auto bg-white shadow-2xl rounded-2xl p-5">
            <div class="flex items-center mb-4">
                <div class="flex">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" class="size-6">
                        <path d="M19.5 21a3 3 0 0 0 3-3v-4.5a3 3 0 0 0-3-3h-15a3 3 0 0 0-3 3V18a3 3 0 0 0 3 3h15ZM1.5 10.146V6a3 3 0 0 1 3-3h5.379a2.25 2.25 0 0 1 1.59.659l2.122 2.121c.14.141.331.22.53.22H19.5a3 3 0 0 1 3 3v1.146A4.483 4.483 0 0 0 19.5 9h-15a4.483 4.483 0 0 0-3 1.146Z" />
                    </svg>
                    <h2 class="text-lg text-gray-800 font-bold mb-4 mx-2">Projetos de @Context.Session.GetString("nome")</h2>
                </div>
            </div>
            <ul class="pl-4">
                @foreach (var repo in Model.Item1){
                    <li class="bg-white text-black border border-blue-500 rounded-md px-3 py-2 my-2 cursor-pointer flex items-center">
                        @Html.ActionLink(@repo.Nome, "Repo", "GitHub", new {owner = repo.Nome.Split("/")[0], repo=repo.Nome.Split("/")[1]})
                    </li>
                }
            </ul>
        </div>


        <!-- Main Content -->
        <div class="flex-1 p-4">
            <!-- Top bar -->
             <div class="flex flex-col md:flex-row justify-between mb-4"> 
                 <!-- Botões de navegação -->
                <div class="flex items-center space-x-2 mb-2 md:mb-0 justify-center md:justify-start">
                    <p class="font-bold text-lg">Adicionar Repositório</p>
                    <button id="repo-button" onclick="repoModal()" class="flex items-center">
                        <span class="material-icons text-blue-500 hover:text-blue-700 mx-2">add</span>
                    </button>
                </div>
             </div> 

            <!-- Recent Changes -->
            <div class="grid grid-cols-3 gap-4">
                <div class="col-span-3">
                    <div class="container bg-white shadow-2xl rounded-2xl p-5">
                        <h2 class="text-lg text-gray-800 font-bold mb-2">O que é o RepoInsight?</h2>
                            O sistema RepoInsight é uma interface aprimorada do GitHub, desenvolvida para facilitar o acompanhamento e a visualização das contribuições dos alunos em projetos de programação. Projetado com foco em professores e educadores, o RepoInsight oferece uma análise detalhada e intuitiva das atividades dos estudantes, permitindo um monitoramento mais eficiente e preciso do progresso individual e coletivo. Com recursos que destacam commits, pull requests, revisões de código e outras métricas relevantes, o RepoInsight transforma dados complexos em insights claros e úteis, apoiando a avaliação e a gestão de projetos educacionais na plataforma GitHub
                    </div>
                </div>
                <div class="col-span-3">
                    <h2 class="text-lg font-bold mb-2">Últimos Visitados</h2>
                </div>

                @foreach (var repo in Model.Item3){
                    <article class="grid grid-cols-3 gap-4 bg-white shadow-2xl rounded-2xl p-5">
                            <h1 class="font-bold text-gray-800 col-span-3">@repo.Nome</h1>
                            <p class="font-light text-gray-500 hover:font-bold col-span-4">@repo.Descricao</p>
                            <h6 class="text-sm text-gray-300 mb-5 col-span-4">@repo.DataVisita</h6>
                            <a onclick="redirectToRepo('@repo.Nome')"class="rounded-lg py-2 px-4 text-center text-white bg-gray-800 hover:cursor-pointer hover:bg-gray-500 col-span-3">Repositorio</a>
                    </article>
                }

            </div>
        </div>
    </div>
    <div id="repo-modal" class="relative z-10 hidden" aria-labelledby="repo-modal" role="dialog" aria-modal="true">

        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

        <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
            <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
               
                <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all pt-4 sm:my-8 sm:w-full sm:max-w-lg">
                    <form asp-action="AddRepo" method="post">
                        @Html.AntiForgeryToken()
                        <div class="bg-white flex justify-center px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                            <div>
                                <input asp-for="@Model.Item2.Nome" class="border-2 border-blue-400 rounded w-96 p-2" type="text" pattern="[\w\-]{1,}\/[\w\-]{1,}" title="Ensira no padrao org/repo" placeholder="organizacao/nome-repositorio" required>
                            </div>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 pb-6 sm:flex sm:flex-row-reverse sm:px-6">
                            <button type="submit"
                                class="inline-flex w-full justify-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-700 sm:ml-3 sm:w-auto">Adicionar</button>
                            <button type="button" onclick="repoModal()"
                                class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div id="conta-modal" class="relative z-10 hidden" aria-labelledby="conta-modal" role="dialog" aria-modal="true">
        
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

        <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
            <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">

                <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all pt-4 sm:my-8 sm:w-full sm:max-w-lg">
                    <form asp-controller="User" asp-action="UpdatePassword" method="post">
                         @Html.AntiForgeryToken()
                        <label for="password" class="flex justify-center">Redefinir Senha</label>
                        <div class="bg-white flex justify-center px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                            <div>
                                <input name="password" class="border-2 border-blue-400 rounded w-96 p-2" type="password" pattern="\w{8,}" placeholder="Nova senha" required>
                            </div>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 pb-6 sm:flex sm:flex-row-reverse sm:px-6">
                            <button type="submit"
                                class="inline-flex w-full justify-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-700 sm:ml-3 sm:w-auto">Atualizar</button>
                            <button type="button" onclick="contaModal()"
                                class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</body>

<script>
    function toggleFolder(element) {
        const nextUl = element.nextElementSibling;
        if (nextUl && nextUl.tagName === 'UL') {
            nextUl.classList.toggle('hidden');
            const arrowIcon = element.querySelector('.arrow-icon');
            if (arrowIcon) {
                arrowIcon.classList.toggle('rotate-90');
            }
        }
    }

    function repoModal(){
        const repo = document.getElementById("repo-modal");
        repo.classList.toggle("hidden");
    }

    function contaModal(){
        const repo = document.getElementById("conta-modal");
        repo.classList.toggle("hidden");
    }

    function redirectToRepo(fullName){
        const [owner, repo,] = fullName.split("/");
        window.location.href = "@url?owner="+encodeURIComponent(owner)+"&repo="+encodeURIComponent(repo), "_blank";
    }

    const values = @Html.Raw(JsonConvert.SerializeObject(Model.Item1.Select(r => r.Nome)));
    localStorage.setItem("values", JSON.stringify(values));
    

    // Function to filter values based on search input
    function filterValues(searchText) {
        const values = JSON.parse(localStorage.getItem("values"));
        return values.filter(value => value.toLowerCase().includes(searchText.toLowerCase()));
    }

    // Function to update search results
    function updateSearchResults(searchText) {
        const searchResultsElement = document.getElementById("searchResults");
        const filteredValues = filterValues(searchText);

        // Clear previous search results
        searchResultsElement.innerHTML = "";

        // Display filtered values
        filteredValues.forEach(value => {
            const listItem = document.createElement("div");
            listItem.className = "cursor-pointer bg-gray-700 text-white";
            listItem.setAttribute("onclick", `redirectToRepo('${value}')`);
            listItem.textContent = value;
            searchResultsElement.appendChild(listItem);
        });

        // Show search results if there are matches, hide otherwise
        searchResultsElement.style.display = filteredValues.length ? "block" : "none";
    }

    // Event listener for input event on search input field
    document.getElementById("searchInput").addEventListener("input", function(event) {
        updateSearchResults(event.target.value);
    });

    document.body.addEventListener("click", function(event) {
        const searchInput = document.getElementById("searchInput");
        const searchResults = document.getElementById("searchResults");

        // Check if the click target is outside the search input and its results container
        if (!searchInput.contains(event.target) && !searchResults.contains(event.target)) {
            // Hide search results
            searchResults.style.display = "none";
        }
    });
</script>
<style>
    #searchResults {
        top: calc(100% + 5px); /* Position below search input */
    }
</style>
@if (ViewBag.ErrorMessage != null)
{
<script>
    const warning = document.getElementById("warning");
    warning.classList.toggle("hidden");
    setTimeout(() => {
      warning.classList.add("opacity-0");
    }, 1300)
    setTimeout(() => {
      warning.classList.toggle("hidden");
    }, 2000)
</script>
}
@if (ViewBag.SuccessMessage != null)
{
<script>
    const success = document.getElementById("success");
    success.classList.toggle("hidden");
    setTimeout(() => {
      success.classList.add("opacity-0");
    }, 1300)
    setTimeout(() => {
      success.classList.toggle("hidden");
    }, 2000)
</script>
}